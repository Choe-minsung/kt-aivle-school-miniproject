#!/usr/bin/env python
# coding: utf-8

# # AIVLE스쿨 DX트랙 5차 미니프로젝트 
# ## <span style="color:red;background-color:#fff5b1">[미션5] 대시보드 개발</span> 

#  * 119 구급대원 출동 일지 데이터를 바탕으로 대시보드를 구성해 보세요.
#     * 당일 출동 이력
#     * 일간/주간/월간 총 출동 건수
#     * 일간/주간/월간 중증질환 비율
#     * 일간/주간/월간 평균 이송 시간
#     * 그 외 필요하다고 생각되는 정보

# ----------

# ### <span style="color:green;background-color:#fff5b1"> [5-1] 사전준비 </span>

#  * Streamlit 사용을 위해 다음의 라이브러리 설치 필요
#     * streamlit : 웹 시각화 프레임 워크
#     * plotly : Interaction 시각화 프레임 워크
#  

# In[1]:


# 필요 라이브러리 설치

get_ipython().system('pip install streamlit')
get_ipython().system('pip install plotly')


# -----------

# ### <span style="color:green;background-color:#fff5b1"> [5-2] streamlit으로 구현되는 대시보드 작성 </span>
#  * 파일명은 dashboard.py로 함

# In[2]:


get_ipython().run_cell_magic('writefile', 'dashboard.py', '\n\n# 라이브러리 불러오기 \n\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport joblib\nfrom keras.models import load_model\nfrom haversine import haversine\nfrom urllib.parse import quote\nimport streamlit as st\nfrom streamlit_folium import st_folium\nimport folium\nimport branca\nfrom geopy.geocoders import Nominatim\nimport ssl\nfrom urllib.request import urlopen\nimport pandas as pd\nimport plotly.express as px\n\n\n# -------------------- ▼ 필요 변수 생성 코딩 Start ▼ --------------------\n\ndata = pd.read_csv(\'./119_emergency_dispatch_1.csv\', encoding="cp949")\n\n## 오늘 날짜\nnow_date = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=9)\nnow_date2 = datetime.datetime.strptime(now_date.strftime("%Y-%m-%d"), "%Y-%m-%d")\n\n## 2023년 최소 날짜, 최대 날짜\nfirst_date = pd.to_datetime("2023-01-01")\nlast_date = pd.to_datetime("2023-12-31")\n\n## 출동 이력의 최소 날짜, 최대 날짜\nmin_date = datetime.datetime.strptime(data[\'출동일시\'].min(), "%Y-%m-%d")\nmax_date = datetime.datetime.strptime(data[\'출동일시\'].max(), "%Y-%m-%d")\n\n\n# -------------------- ▲ 필요 변수 생성 코딩 End ▲ --------------------\n\n\n# -------------------- ▼ Streamlit 웹 화면 구성 START ▼ --------------------\n\n# 레이아웃 구성하기 \nst.set_page_config(layout="wide")\n\n# tabs 만들기 \nt1, t2 = st.tabs([\'출동일지\', \'대시보드\'])\n\nwith t2:\n    st.markdown("## 대시 보드")\n\n    \n# tab2 내용 구성하기\n \n    #     ## -------------------- ▼ 2-1그룹 통계 조회 기간 선택하기 ▼ --------------------\n    c1, c2, c3 = st.columns([0.3, 0.2, 0.1])\n\n    with c1:\n        slider_date = st.slider(\'날짜\', min_value = min_date, max_value = max_date, value = (min_date, now_date2))\n\n    with c2:\n        slider_week = st.slider(\'주간\', min_value = min_date, max_value = max_date, step = datetime.timedelta(weeks = 1),\n                                value = (min_date, now_date2))\n\n    with c3:\n        slider_month = st.slider(\'월간\', min_value = min_date, max_value = max_date, step = datetime.timedelta(weeks = 1),\n                                 value = (min_date, now_date2), format = \'YYYY-MM\')\n\n    ## 선택된 일자의 data 추출\n    data[\'datetime\'] = pd.to_datetime(data[\'출동일시\'])\n    \n    day_list_df = data[ (slider_date[0] <= data[\'datetime\']) & (data[\'datetime\'] <= slider_date[1]) ]\n    \n\n    ## 선택된 주간의 data 추출\n    \n    data[\'주별\'] = data[\'datetime\'].dt.strftime("%W").astype(int)\n    \n    min_week = int(slider_week[0].strftime("%W"))\n    max_week = int(slider_week[1].strftime("%W"))\n    week_list_df = data[(data[\'주별\'] >= min_week) & (data[\'주별\'] <= max_week)]\n        \n\n    ## 선택된 월의 data 추출\n    \n    data[\'월별\'] = data[\'datetime\'].dt.month.astype(int)\n    min_month = slider_month[0].month\n    max_month = slider_month[1].month\n    \n    month_list_df = data[(data[\'월별\'] >= min_month) & (data[\'월별\'] <= max_month)]\n\n\n#     ## -------------------------------------------------------------------------------------------\n\n    ## -------------------- ▼ 2-0그룹 금일 출동 이력 출력 ▼ --------------------\n    \n    st.info(\'금일 출동내역\')\n    \n#     data[\'datetime\'] = pd.to_datetime(data[\'출동일시\'])\n    \n    today_date = now_date.strftime("%Y-%m-%d")\n    today_count = len(data[data[\'datetime\'] == today_date])\n    \n    if today_count > 0 :\n        st.dataframe(data[data[\'datetime\'] == today_date])\n    else:\n        st.markdown("금일 출동내역이 없습니다.")\n    \n#     ## -------------------------------------------------------------------\n\n\n\n#      ## -------------------- ▼ 2-2그룹 일간/주간/월간 평균 이송시간 통계 그래프 ▼ --------------------\n    \n\n    \n    st.success("이송시간 통계")\n\n    c1, c2, c3 = st.columns([0.3, 0.3, 0.3])\n    \n    with c1:\n\n        group_day_time = data.groupby(by = [\'출동일시\'], as_index = False)[\'이송 시간\'].mean()\n        st.line_chart(data = group_day_time, x = \'출동일시\', y = \'이송 시간\', use_container_width = True)\n\n    with c2:\n\n        group_week_time = data.groupby(by = [\'나이\'], as_index = False)[\'이송 시간\'].mean()\n        st.line_chart(data = group_week_time, x = \'나이\', y = \'이송 시간\', use_container_width = True)\n\n    with c3:\n\n        group_month_time = data.groupby(by = [\'중증질환\'], as_index = False)[\'이송 시간\'].mean()\n        st.line_chart(data = group_month_time, x = \'중증질환\', y = \'이송 시간\', use_container_width = True)\n\n    \n#     ## -------------------------------------------------------------------------------------------\n\n#     ## -------------------- ▼ 2-3 그룹 일간/주간/월간 총 출동 건수 통계 그래프 ▼ --------------------\n\n    \n    select_bins = st.radio("주기", (\'일간\', \'주간\', \'월간\'), horizontal=True)\n    \n    st.error("출동 건수")\n    \n    if select_bins == \'일간\':\n        select_df = day_list_df\n#         st.write(select_df)\n        re_select_df = select_df.rename(columns={"출동일시": \'일별\'})    \n        \n        dispatch_count = re_select_df.groupby(by = \'일별\', as_index = False)[\'ID\'].count()\n        dispatch_count = dispatch_count.rename(columns = {\'ID\' : \'출동건수\'})\n        dispatch_count = dispatch_count.sort_values(\'일별\', ascending = True)\n\n        st.bar_chart(dispatch_count, x = \'일별\', y = \'출동건수\', use_container_width = True)\n        \n    elif select_bins == \'주간\':\n        select_df = week_list_df\n#         st.write(select_df)\n        \n        dispatch_count = select_df.groupby(by = \'주별\', as_index = False)[\'ID\'].count()\n        dispatch_count = dispatch_count.rename(columns = {\'ID\' : \'출동건수\'})\n        dispatch_count = dispatch_count.sort_values(\'주별\', ascending = True)\n\n        st.bar_chart(dispatch_count, x = \'주별\', y = \'출동건수\', use_container_width = True)\n        \n    else:\n        select_df = month_list_df\n#         st.write(select_df)\n        \n        dispatch_count = select_df.groupby(by = \'월별\', as_index = False)[\'ID\'].count()\n        dispatch_count = dispatch_count.rename(columns = {\'ID\' : \'출동건수\'})\n        dispatch_count = dispatch_count.sort_values(\'월별\', ascending = True)\n\n        st.bar_chart(dispatch_count, x = \'월별\', y = \'출동건수\', use_container_width = True)\n   \n\n\n#     ## -------------------------------------------------------------------------------------------\n\n#     ## -------------------- ▼ 2-4 성별/중증질환/나이대 별 비율 그래프 ▼ --------------------\n    \n    import plotly.express as px\n    \n    st.warning("중증 질환별 통계")\n\n    c1, c2, c3 = st.columns([0.3, 0.3, 0.3])\n    \n    with c1: # 성별 통계\n\n        group_day_disease = select_df.groupby(by=[\'성별\'], as_index=False)[\'ID\'].count()\n        group_day_disease = group_day_disease.rename(columns={\'ID\' : \'출동건수\'})\n\n        fig = px.pie(group_day_disease, names=\'성별\', values=\'출동건수\', title = \'성별 통계\' , hole = 0.3)\n        fig.update_traces(textposition = \'inside\', textinfo = \'percent + label\')\n        fig.update_layout(font=dict(size=16))\n        st.plotly_chart(fig)\n\n    with c2: # 중증질환별 통계\n\n        group_day_disease = select_df.groupby(by=[\'중증질환\'], as_index=False)[\'ID\'].count()\n        group_day_disease = group_day_disease.rename(columns={\'ID\' : \'출동건수\'})\n\n        fig = px.pie(group_day_disease, names=\'중증질환\', values=\'출동건수\', title = \'중증질환 별 통계\' , hole = 0.3)\n        fig.update_traces(textposition = \'inside\', textinfo = \'percent + label\')\n        fig.update_layout(font=dict(size=16))\n        st.plotly_chart(fig)\n\n    with c3:  # 나이대별 통계\n\n        select_df[\'나이대\'] = (select_df[\'나이\']//10)*10\n        group_day_disease = select_df.groupby(by=[\'나이대\'], as_index=False)[\'ID\'].count()\n        group_day_disease = group_day_disease.rename(columns={\'ID\' : \'출동건수\'})\n\n        fig = px.pie(group_day_disease, names=\'나이대\', values=\'출동건수\', title = \'나이대 별 통계\' , hole = 0.3)\n        fig.update_traces(textposition = \'inside\', textinfo = \'percent + label\')\n        fig.update_layout(font=dict(size=16))\n        st.plotly_chart(fig)\n\n    \n    ## -------------------------------------------------------------------------------------------\n\n    ## -------------------- ▼ 2-4그룹 그외 필요하다고 생각되는 정보 추가 ▼ --------------------\n\n    \n# C:\\Users\\user\\KT수업자료\\미프 5차\\DX_미니프로젝트_5차_4일차_실습자료\\dashboard.py\n')


# ----------

# ### <span style="color:green;background-color:#fff5b1"> [4-3] 대시보드 확인하기 </span>

# * dispatch_log.py 파일이 있는 디렉토리로 이동
# * 'Shift + 마우스 우클릭' -> '터미널에서 열기' 클릭
# * -> '터미널에서 열기'  메뉴가 없으면 '여기에 PowerShell 창 열기(S)' 클릭
# * 아래의 streamlit 실행( ! 빼고 실행)
# * training.py를 수정후 브라우저의 새로고침을 누르면 프로토타입에 자동 변경됨
# * 새로고침을 통해 변경사항 확인

# In[ ]:


# 프로포타입 확인하기

get_ipython().system('streamlit run dashboard.py')


# ## <span style="color:red;background-color:#fff5b1">[도전 미션] 프로토타입 + 대시보드 합치기</span> 

#   * 미션4 에서 만든 프로토타입과 미션5에서 만든 대시보드를 하나의 파일로 합쳐서 최종 솔루션 프로토타입을 완성 하세요.
#   * 최종 솔루션 프로토타입의 파일명은 app.py 입니다.
#   * app.py 가 완성되면 Streamlit으로 실행하여 프로토타입과 대시보드가 잘 동작 하는지 체크해 주세요.

# In[3]:


get_ipython().run_cell_magic('writefile', 'app.py', '\n\n# 라이브러리 불러오기 \n\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport joblib\nfrom keras.models import load_model\nfrom haversine import haversine\nfrom urllib.parse import quote\nimport streamlit as st\nfrom streamlit_folium import st_folium\nimport folium\nimport branca\nfrom geopy.geocoders import Nominatim\nimport ssl\nfrom urllib.request import urlopen\nimport pandas as pd\nimport plotly.express as px\n\n# geocoding : 거리주소 -> 위도/경도 변환 함수\n# Nominatim 파라미터 : user_agent = \'South Korea\', timeout=None\n# 리턴 변수(위도,경도) : lati, long\n# 참고: https://m.blog.naver.com/rackhunson/222403071709\n\ndef geocoding(address):\n    geolocator = Nominatim(user_agent = \'South Korea\', timeout=None)\n    location = geolocator.geocode(address)\n    lat = location.latitude\n    lon = location.longitude\n    return lat, lon\n\n\n# preprocessing : \'발열\', \'고혈압\', \'저혈압\' 조건에 따른 질병 전처리 함수(미션3 참고)\n# 리턴 변수(중증질환,증상) : X\ndef preprocessing(desease):\n    \n    desease = desease.copy()\n    \n    desease[\'발열\'] = [ 1 if i >= 37 else 0 for i in desease[\'체온\'] ]\n    desease[\'고혈압\'] = [ 1 if i >= 140 else 0 for i in desease[\'수축기 혈압\'] ]\n    desease[\'저혈압\'] = [ 1 if i <= 90 else 0 for i in desease[\'수축기 혈압\'] ]\n\n\n    X = desease[[\'체온\', \'수축기 혈압\', \'이완기 혈압\', \'호흡 곤란\', \'간헐성 경련\', \'설사\', \'기침\', \'출혈\', \'통증\', \n                 \'만지면 아프다\', \'무감각\', \'마비\', \'현기증\', \'졸도\',\n                 \'말이 어눌해졌다\', \'시력이 흐려짐\', \'발열\', \'고혈압\', \'저혈압\']]\n                 \n\n    return X\n\n\n# predict_disease : AI 모델 중증질환 예측 함수 (미션1 참고)\n# 사전 저장된 모델 파일 필요(119_model_XGC.pkl)\n# preprocessing 함수 호출 필요 \n# 리턴 변수(4대 중증 예측) : sym_list[pred_y_XGC[0]]\ndef predict_disease(patient_data):\n    \n    sym_list = [\'뇌경색\', \'뇌출혈\', \'복부손상\', \'심근경색\']\n    test_df = pd.DataFrame(patient_data)\n    test_x = preprocessing(test_df)\n    model_XGC = joblib.load(\'./119_model_XGC.pkl\')\n    pred_y_XGC = model_XGC.predict(test_x)\n    return sym_list[pred_y_XGC[0]]\n\n\n# find_hospital : 실시간 병원 정보 API 데이터 가져오기 (미션1 참고)\n# 리턴 변수(거리, 거리구분) : distance_df\ndef find_hospital(special_m, lati, long):\n\n    context=ssl.create_default_context()\n    context.set_ciphers("DEFAULT")\n      \n    #  [국립중앙의료원 - 전국응급의료기관 조회 서비스] 활용을 위한 개인 일반 인증키(Encoding) 저장\n    key = "gwBkTKBuhZgVDIrEv%2BnO62XD2qkefBNpFtSVAjpYNvYFYtJD72O8sEa%2F5oY2yNCQJgzUaO%2FT%2Fi3ZR61TIUSYtQ%3D%3D"\n           \n\n    # city = 대구광역시, 인코딩 필요\n    city = quote("대구광역시")\n    \n    # 미션1에서 저장한 병원정보 파일 불러오기 \n    solution_df = pd.read_csv(\'./daegu_hospital_list.csv\')\n\n    # 응급실 실시간 가용병상 조회\n    url_realtime = \'https://apis.data.go.kr/B552657/ErmctInfoInqireService/getEmrrmRltmUsefulSckbdInfoInqire\' + \'?serviceKey=\' + key + \'&STAGE1=\' + city + \'&pageNo=1&numOfRows=100\'\n    result = urlopen(url_realtime, context=context)\n    emrRealtime_big = pd.read_xml(result, xpath=\'.//item\')\n\n    ## 응급실 실시간 가용병상 정보에서 기관코드(hpid), 응급실 병상수(\'hvec\'), 수술실 수(\'hvoc\') 정보만 추출하여 emRealtime_small 변수에 저장\n    ## emrRealtime_big 중 [hpid, hvec, hvoc] 컬럼 활용\n    emrRealtime_small = emrRealtime_big[[\'hpid\', \'hvec\', \'hvoc\']].copy()\n\n    # solution_df와 emrRealtime_small 데이터프레임을 결합하여 solution_df에 저장\n    solution_df = pd.merge(solution_df, emrRealtime_small )\n\n    # 응급실 실시간 중증질환 수용 가능 여부\n    url_acpt = \'https://apis.data.go.kr/B552657/ErmctInfoInqireService/getSrsillDissAceptncPosblInfoInqire\' + \'?serviceKey=\' + key + \'&STAGE1=\' + city + \'&pageNo=1&numOfRows=100\'\n    result = urlopen(url_acpt, context=context)\n    emrAcpt_big = pd.read_xml(result, xpath=\'.//item\')\n\n    ## 다른 API함수와 다르게 기관코드 컬럼명이 다름 (hpid --> dutyName)\n    ## 기관코드 컬렴명을 \'hpid\'로 일치화시키기 위해, 컬럼명을 변경함\n\n    emrAcpt_big = emrAcpt_big.rename(columns={"dutyName":"hpid"})\n\n    ## 실시간 중증질환자 수용 가능 병원정보에서 필요한 정보만 추출하여 emrAcpt_small 변수에 저장\n    ## emrAcpt 중 [hpid, MKioskTy1, MKioskTy2, MKioskTy3, MKioskTy4, MKioskTy5, MKioskTy7,MKioskTy8, MKioskTy10, MKioskTy11] 컬럼 확인\n\n    emrAcpt_small = emrAcpt_big[[\'hpid\', \'MKioskTy1\', \'MKioskTy2\', \'MKioskTy3\', \'MKioskTy4\', \'MKioskTy5\', \'MKioskTy7\',\'MKioskTy8\', \'MKioskTy10\', \'MKioskTy11\']].copy()\n\n    # solution_df와 emrRealtime_small 데이터프레임을 결합하여 solution_df에 저장\n    solution_df = pd.merge(solution_df, emrAcpt_small)\n\n    # 컬럼명 변경\n    column_change = {\'hpid\': \'병원코드\',\n                     \'dutyName\': \'병원명\',\n                     \'dutyAddr\': \'주소\',\n                     \'dutyTel3\': \'응급연락처\',\n                     \'wgs84Lat\': \'위도\',\n                     \'wgs84Lon\': \'경도\',\n                     \'hperyn\': \'응급실수\',\n                     \'hpopyn\': \'수술실수\',\n                     \'hvec\': \'가용응급실수\',\n                     \'hvoc\': \'가용수술실수\',\n                     \'MKioskTy1\': \'뇌출혈\',\n                     \'MKioskTy2\': \'뇌경색\',\n                     \'MKioskTy3\': \'심근경색\',\n                     \'MKioskTy4\': \'복부손상\',\n                     \'MKioskTy5\': \'사지접합\',\n                     \'MKioskTy7\': \'응급투석\',\n                     \'MKioskTy8\': \'조산산모\',\n                     \'MKioskTy10\': \'신생아\',\n                     \'MKioskTy11\': \'중증화상\'\n                     }\n    solution_df = solution_df.rename(columns=column_change)\n    solution_df = solution_df.replace({"정보미제공": "N"})\n    solution_df = solution_df.replace({"불가능": "N"})\n\n    # 응급실 가용율, 포화도 추가\n    \n    solution_df.loc[solution_df[\'가용응급실수\'] < 0, \'가용응급실수\'] = 0\n    solution_df.loc[solution_df[\'가용수술실수\'] < 0, \'가용수술실수\'] = 0\n\n    solution_df[\'응급실가용율\'] = round(solution_df[\'가용응급실수\'] / solution_df[\'응급실수\'], 2)\n    solution_df.loc[solution_df[\'응급실가용율\'] > 1,\'응급실가용율\']=1\n    solution_df[\'응급실포화도\'] = pd.cut(solution_df[\'응급실가용율\'], bins=[-1, 0.1, 0.3, 0.6, 1], labels=[\'불가\', \'혼잡\', \'보통\', \'원활\'])\n\n    ### 중증 질환 수용 가능한 병원 추출\n    ### 미션1 상황에 따른 병원 데이터 추출하기 참고\n\n    if special_m in [\'뇌출혈\', \'뇌경색\', \'심근경색\', \'복부손상\', \'사지접합\', \'응급투석\', \'조산산모\', \'신생아\',\'중증화상\' ]:\n        # 조건1 : special_m 중증질환자 수용이 가능하고\n        # 조건2 : 응급실 포화도가 불가가 아닌 병원\n        condition1 = (solution_df[special_m] == \'Y\') & (solution_df[\'가용수술실수\'] >= 1)\n        condition2 = (solution_df[\'응급실포화도\'] != \'불가\')\n        \n        # 조건1, 2에 해당되는 응급의료기관 정보를 distance_df에 저장하기\n        distance_df = solution_df[condition1 & condition2].copy()\n\n    # 매개변수 special_m 값이 중증질환 리스트에 포함이 안되는 경우\n    else :\n        # 조건1 : 응급실 포화도가 불가가 아닌 병원\n        condition1 = (solution_df[\'응급실포화도\'] != \'불가\')\n\n        # 조건1에 해당되는 응급의료기관 정보를 distance_df에 저장하기\n        distance_df = solution_df[condition1].copy()\n\n    ### 환자 위치로부터의 거리 계산\n    distance = []\n    patient = (lati, long)\n    \n    for idx, row in distance_df.iterrows():\n        distance.append(round(haversine((row[\'위도\'], row[\'경도\']), patient, unit=\'km\'), 2))\n\n    distance_df[\'거리\'] = distance\n    distance_df[\'거리구분\'] = pd.cut(distance_df[\'거리\'], bins=[-1, 2, 5, 10, 100],\n                                 labels=[\'2km이내\', \'5km이내\', \'10km이내\', \'10km이상\'])\n            \n    return distance_df\n\n# -------------------- 필요 함수 생성 코딩 END --------------------\n\n# -------------------- ▼ 1-0그룹 Streamlit 웹 화면 구성 Tab 생성 START ▼ --------------------\n\n# 레이아웃 구성하기 \nst.set_page_config(layout="wide")\n\n# tabs 만들기 \nt1, t2 = st.tabs([\'출동일지\', \'대시보드\'])\n\n# tab1 내용물 구성하기 \nwith t1:\n\n    # 제목 넣기\n    st.markdown("## 119 응급 출동 일지")\n    \n    # 시간 정보 가져오기 \n    now_date = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=9)\n\n    \n    # 환자정보 널기\n    st.markdown("#### 환자 정보")\n\n    ## -------------------- ▼ 1-1그룹 날짜/시간 입력 cols 구성(출동일/날짜정보(input_date)/출동시간/시간정보(input_time)) ▼ --------------------\n     \n    c1, c2, c3, c4 = st.columns([0.1, 0.3, 0.1, 0.3])\n    with c1:\n        st.info(\'출동일\')\n    with c2:\n        input_date = st.date_input(\'출동일\')\n    with c3:\n        st.info(\'출동시간\')\n    with c4:\n        input_time = st.time_input(\'출동시간\')\n\n#     ## -------------------------------------------------------------------------------------\n\n\n#     ## -------------------- ▼ 1-2그룹 이름/성별 입력 cols 구성(이름/이름 텍스트 입력(name)/나이/나이 숫자 입력(age)/성별/성별 라디오(patient_s)) ▼ --------------------\n\n    c1, c2, c3, c4, c5, c6 = st.columns([0.1, 0.3, 0.1, 0.1, 0.1, 0.1])\n    with c1:\n        st.info(\'이름\')\n    with c2:\n        name = st.text_input(\'이름\')\n    with c3:\n        st.info(\'나이\')\n    with c4:\n        age = st.number_input(\'나이\', min_value = 0, max_value = 120)\n    with c5:\n        st.info(\'성별\')\n    with c6:\n        patient_s = st.radio(\'성별\', [\'남\', \'여\'], horizontal = True)\n\n#    ##-------------------------------------------------------------------------------------\n\n    \n#     ## -------------------- ▼ 1-3그룹 체온/환자위치(주소) 입력 cols 구성(체온/체온 숫자 입력(fever)/환자 위치/환자위치 텍스트 입력(location)) ▼ --------------------\n\n    c1, c2, c3, c4 = st.columns([0.1, 0.3, 0.1, 0.3])# col 나누기\n    with c1:\n        st.info(\'체온\')\n    with c2:\n        fever = st.slider(\'체온\', 30.0, 45.0)\n    with c3:\n        st.info(\'환자위치\')\n    with c4:\n        location = st.text_input(\'환자위치\')\n    \n#     ##-------------------------------------------------------------------------------------\n\n#     ## ------------------ ▼ 1-4그룹 혈압 입력 cols 구성(수축기혈압/수축기 입력 슬라이더(high_blood)/이완기혈압/이완기 입력 슬라이더(low_blood)) ▼ --------------------\n#     ## st.slider 사용\n\n    c1, c2, c3, c4 = st.columns([0.1, 0.3, 0.1, 0.3]) # col 나누기\n    with c1:\n        st.info(\'수축기 혈압\')\n    with c2:\n        high_blood = st.slider(\'수축기 혈압\', 10, 200) # 140이상 고혈압, 90이하 저혈압\n    with c3:\n        st.info(\'이완기 혈압\')\n    with c4:\n        low_blood = st.slider(\'이완기 혈압\', 10, 200) # 90이상 고혈압, 60이하 저혈압\n    \n\n#     ##-------------------------------------------------------------------------------------\n\n#     ## -------------------- ▼ 1-5그룹 환자 증상체크 입력 cols 구성(증상체크/checkbox1/checkbox2/checkbox3/checkbox4/checkbox5/checkbox6/checkbox7) ▼ -----------------------    \n#     ## st.checkbox 사용\n#     ## 입력 변수명1: {기침:cough_check, 간헐적 경련:convulsion_check, 마비:paralysis_check, 무감각:insensitive_check, 통증:pain_check, 만지면 아픔: touch_pain_check}\n#     ## 입력 변수명2: {설사:diarrhea_check, 출혈:bleeding_check, 시력 저하:blurred_check, 호흡 곤란:breath_check, 현기증:dizziness_check}\n    \n#     st.markdown("#### 증상 체크하기")\n    st.markdown("#### 증상 체크하기")\n    \n#     ********** # col 나누기\n    c1, c2, c3, c4, c5, c6, c7, c8 = st.columns([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])\n    with c1:\n        st.error("증상 체크")\n    with c2:\n        cough_check = st.checkbox("기침")\n        convulsion_check = st.checkbox("간헐적 경련")\n    with c3:\n        paralysis_check = st.checkbox("마비")\n        insensitive_check = st.checkbox("무감각")\n    with c4:\n        pain_check = st.checkbox("통증")\n        touch_pain_check = st.checkbox("만지면 아픔")\n    with c5:\n        diarrhea_check = st.checkbox("설사")\n        bleeding_check = st.checkbox("출혈")\n    with c6:\n        blurred_check = st.checkbox("시력 저하")\n        breath_check = st.checkbox("호흡 곤란")\n    with c7:\n        dizziness_check = st.checkbox("현기증")\n        swoon_check = st.checkbox("졸도")\n    with c8:\n        inarticulate_check = st.checkbox("말이 어눌해졌다")\n        blurred_check = st.checkbox("시력이 흐려짐")\n\n\n#     ## -------------------------------------------------------------------------------------\n    \n#     ## -------------------- ▼ 1-6그룹 중증 질환 여부, 중증 질환 판단(special_yn) col 구성 ▼ --------------------\n#     ## selectbox  사용(변수: special_yn)\n    \n    c1, c2, c3 = st.columns([0.1, 0.3, 0.4]) # col 나누기\n    with c1:\n        st.error("중증질환 여부")\n    with c2:\n        special_yn = st.selectbox(\'중증질환 선택 or 예측\' ,(\'중증질환 선택\', \'중증질환 예측\'))\n\n# \'뇌출혈\', \'신생아\', \'중증화상\', \'뇌경색\', \'심근경색\', \'복부손상\', \'사지접합\', \'응급투석\', \'조산산모\'\n    \n#     ##-------------------------------------------------------------------------------------\n    \n#     ## -------------------- ▼ 1-7그룹 중증 질환 선택 또는 예측 결과 표시 cols 구성 ▼ --------------------\n    \n    c1, c2= st.columns([0.01, 0.99]) # col 나누기\n\n    \n        \n    with c2: \n        if special_yn == "중증질환 예측":\n\n            patient_data = {\n#                 "ID" : [500001],\n#                 "출동일시" :[input_date],\n#                 "이름" : [name],\n#                 "성별" : [patient_s],\n#                 "나이" : [age],\n                "체온": [fever],\n                "수축기 혈압": [high_blood],\n                "이완기 혈압": [low_blood],\n                "호흡 곤란": [int(breath_check)],\n                "간헐성 경련": [int(convulsion_check)],\n                "설사": [int(diarrhea_check)],\n                "기침": [int(cough_check)],\n                "출혈": [int(bleeding_check)],\n                "통증": [int(pain_check)],\n                "만지면 아프다": [int(touch_pain_check)],\n                "무감각": [int(insensitive_check)],\n                "마비": [int(paralysis_check)],\n                "현기증": [int(dizziness_check)],\n                "졸도": [int(swoon_check)],\n                "말이 어눌해졌다": [int(inarticulate_check)],\n                "시력이 흐려짐": [int(blurred_check)]\n# #                 "중증질환": [""]\n            }\n            \n# #             # AI 모델 중증질환 예측 함수 호출\n            special_m = predict_disease(patient_data)\n            \n            st.markdown(f"### 예측된 중증 질환은 {special_m}입니다")\n            st.write("중증 질환 예측은 뇌출혈, 뇌경색, 심근경색, 응급내시경 4가지만 분류됩니다.")\n            st.write("이외의 중증 질환으로 판단될 경우, 직접 선택하세요")\n\n        elif special_yn == "중증질환 선택":\n            special_m = st.radio("중증질환 선택",\n                                  [\'뇌출혈\', \'신생아\', \'중증화상\', "뇌경색", "심근경색", \n                                   "복부손상", "사지접합",  "응급투석", "조산산모"], horizontal=True)\n\n        else:\n            special_m = "중증 아님"\n            st.write("중증질환 아님")\n\n#     ## ---------------------------------------------------------------------------\n\n\n#     # ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼  [도전미션] ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ \n    \n#     ## -------------------- ▼ 1-8그룹 가용병원 표시 폼 지정 ▼ --------------------\n    \n    with st.form(key=\'tap1_first\'):\n        \n        ### 병원 조회 버튼 생성\n        if st.form_submit_button(label = \'병원조회\'):\n\n            #### 거리주소 -> 위도/경도 변환 함수 호출\n            lat, lon = geocoding(location)\n\n            #### 인근 병원 찾기 함수 호출\n            hospital_list =  find_hospital(special_m, lat, lon)\n            \n            #### 필요 병원 정보 추출 \n            display_column = [\'병원명\', "주소", "응급연락처", "응급실수", "수술실수", "가용응급실수", "가용수술실수",\n                              \'응급실포화도\', \'거리\', \'거리구분\']\n            display_df = hospital_list[display_column].sort_values([\'거리구분\', \'응급실포화도\', \'거리\'],\n                                                                   ascending=[True, False, True])\n            display_df.reset_index(drop=True, inplace=True)\n\n            #### 추출 병원 지도에 표시\n            with st.expander("인근 병원 리스트", expanded=True):\n                st.dataframe(display_df)\n                m = folium.Map(location=[lat,lon], zoom_start=11)\n                icon = folium.Icon(color="red")\n                folium.Marker(location=[lat, lon], popup="환자위치", tooltip="환자위치: "+location, icon=icon).add_to(m)\n\n                \n                ###### folium을 활용하여 지도 그리기 (3일차 교재 branca 참조)\n                \n                st.markdown("지도")\n\n                for idx, row in hospital_list[:10].iterrows():\n\n                    html = """<!DOCTYPE html>\n                    <html>\n                        <table style="height: 126px; width: 330px;"> <tbody> <tr>\n                            <td style="background-color: #2A799C;">\n                            <div style="color: #ffffff;text-align:center;">병원명</div></td>\n                            <td style="width: 230px;background-color: #C5DCE7;">{}</td>""".format(row[\'병원명\'])+"""</tr>\n                            <tr><td style="background-color: #2A799C;">\n                            <div style="color: #ffffff;text-align:center;">가용응급실수</div></td>\n                            <td style="width: 230px;background-color: #C5DCE7;">{}</td>""".format(row[\'가용응급실수\'])+"""</tr>\n                            <tr><td style="background-color: #2A799C;">\n                            <div style="color: #ffffff;text-align:center;">거리</div></td>\n                            <td style="width: 230px;background-color: #C5DCE7;">{}</td>""".format(row[\'거리\'])+""" </tr>\n                        </tbody> </table> </html> """\n\n                    iframe = branca.element.IFrame(html=html, width=350, height=150)\n                    popup_text = folium.Popup(iframe,parse_html=True)\n                    icon = folium.Icon(color="blue")\n\n                    folium.Marker(location=[row[\'위도\'], row[\'경도\']],\n                                            ttttttttttttt, icon=icon).add_to(m)\n\n                st_data = st_folium(m, width=1000)\n\n#     # ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ \n\n    \n#     # -------------------- 완료시간 저장하기 START-------------------- \n\n\n#     #  -------------------- ▼ 1-9그룹 완료시간 저장 폼 지정 ▼  --------------------\n    with st.form(key=\'tap2_first\'):\n\n        ## 완료시간 시간표시 cols 구성\n#         c1, c2 = st.columns([0.5, 0.5]) # col 나누기\n        \n#         with c1:\n        st.error(\'완료 시간\')\n#         with c2:\n        end_time = st.time_input(\'\')\n\n        ## 완료시간 저장 버튼\n        if st.form_submit_button(label=\'저장하기\'):\n            dispatch_data = pd.read_csv(\'./119_emergency_dispatch.csv\', encoding="cp949" )\n            id_num = list(dispatch_data[\'ID\'].str[1:].astype(int))\n            max_num = np.max(id_num)\n            max_id = \'P\' + str(max_num)\n            elapsed = (end_time.hour - input_time.hour)*60 + (end_time.minute - input_time.minute)\n\n            check_condition1 = (dispatch_data.loc[dispatch_data[\'ID\'] ==max_id, \'출동일시\'].values[0]  == str(input_date))\n            check_condition2 = (dispatch_data.loc[dispatch_data[\'ID\']==max_id, \'이름\'].values[0] == name)\n\n            ## 마지막 저장 내용과 동일한 경우, 내용을 update 시킴\n            \n            if check_condition1 and check_condition2:\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'나이\'] = age\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'성별\'] = patient_s\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'체온\'] = fever\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'수축기 혈압\'] = high_blood\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'이완기 혈압\'] = low_blood\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'호흡 곤란\'] = int(breath_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'간헐성 경련\'] = int(convulsion_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'설사\'] = int(diarrhea_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'기침\'] = int(cough_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'출혈\'] = int(bleeding_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'통증\'] = int(pain_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'만지면 아프다\'] = int(touch_pain_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'무감각\'] = int(insensitive_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'마비\'] = int(paralysis_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'현기증\'] = int(dizziness_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'졸도\'] = int(swoon_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'말이 어눌해졌다\'] = int(inarticulate_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'시력이 흐려짐\'] = int(blurred_check)\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'중증질환\'] = special_m\n                dispatch_data.loc[dispatch_data[\'ID\'] == max_id, \'이송 시간\'] = int(elapsed)\n\n\n            else: # 새로운 출동 이력 추가하기\n                new_id = \'P\' + str(max_num+1)\n                new_data = {\n                    "ID" : [new_id],\n                    "출동일시" : [str(input_date)],\n                    "이름" : [name],\n                    "성별" : [patient_s],\n                    "나이" : [age],\n                    "체온": [fever],\n                    "수축기 혈압": [high_blood],\n                    "이완기 혈압": [low_blood],\n                    "호흡 곤란": [int(breath_check)],\n                    "간헐성 경련": [int(convulsion_check)],\n                    "설사": [int(diarrhea_check)],\n                    "기침": [int(cough_check)],\n                    "출혈": [int(bleeding_check)],\n                    "통증": [int(pain_check)],\n                    "만지면 아프다": [int(touch_pain_check)],\n                    "무감각": [int(insensitive_check)],\n                    "마비": [int(paralysis_check)],\n                    "현기증": [int(dizziness_check)],\n                    "졸도": [int(swoon_check)],\n                    "말이 어눌해졌다": [int(inarticulate_check)],\n                    "시력이 흐려짐": [int(blurred_check)],\n                    "중증질환": [special_m],\n                    "이송 시간" : [int(elapsed)]\n                }\n\n                new_df= pd.DataFrame(new_data)\n                dispatch_data = pd.concat([dispatch_data, new_df], axis=0, ignore_index=True)\n                \n# -------------------- ▼ 필요 변수 생성 코딩 Start ▼ --------------------\n\ndata = pd.read_csv(\'./119_emergency_dispatch_1.csv\', encoding="cp949")\n\n## 오늘 날짜\nnow_date = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=9)\nnow_date2 = datetime.datetime.strptime(now_date.strftime("%Y-%m-%d"), "%Y-%m-%d")\n\n## 2023년 최소 날짜, 최대 날짜\nfirst_date = pd.to_datetime("2023-01-01")\nlast_date = pd.to_datetime("2023-12-31")\n\n## 출동 이력의 최소 날짜, 최대 날짜\nmin_date = datetime.datetime.strptime(data[\'출동일시\'].min(), "%Y-%m-%d")\nmax_date = datetime.datetime.strptime(data[\'출동일시\'].max(), "%Y-%m-%d")\n\n\n# -------------------- ▲ 필요 변수 생성 코딩 End ▲ --------------------\n\n\n# -------------------- ▼ Streamlit 웹 화면 구성 START ▼ --------------------\n\n# 레이아웃 구성하기 \nst.set_page_config(layout="wide")\n\n# tabs 만들기 \n\n\nwith t2:\n    st.markdown("## 대시 보드")\n\n    \n# tab2 내용 구성하기\n \n    #     ## -------------------- ▼ 2-1그룹 통계 조회 기간 선택하기 ▼ --------------------\n    c1, c2, c3 = st.columns([0.3, 0.2, 0.1])\n\n    with c1:\n        slider_date = st.slider(\'날짜\', min_value = min_date, max_value = max_date, value = (min_date, now_date2))\n\n    with c2:\n        slider_week = st.slider(\'주간\', min_value = min_date, max_value = max_date, step = datetime.timedelta(weeks = 1),\n                                value = (min_date, now_date2))\n\n    with c3:\n        slider_month = st.slider(\'월간\', min_value = min_date, max_value = max_date, step = datetime.timedelta(weeks = 1),\n                                 value = (min_date, now_date2), format = \'YYYY-MM\')\n\n    ## 선택된 일자의 data 추출\n    data[\'datetime\'] = pd.to_datetime(data[\'출동일시\'])\n    \n    day_list_df = data[ (slider_date[0] <= data[\'datetime\']) & (data[\'datetime\'] <= slider_date[1]) ]\n    \n\n    ## 선택된 주간의 data 추출\n    \n    data[\'주별\'] = data[\'datetime\'].dt.strftime("%W").astype(int)\n    \n    min_week = int(slider_week[0].strftime("%W"))\n    max_week = int(slider_week[1].strftime("%W"))\n    week_list_df = data[(data[\'주별\'] >= min_week) & (data[\'주별\'] <= max_week)]\n        \n\n    ## 선택된 월의 data 추출\n    \n    data[\'월별\'] = data[\'datetime\'].dt.month.astype(int)\n    min_month = slider_month[0].month\n    max_month = slider_month[1].month\n    \n    month_list_df = data[(data[\'월별\'] >= min_month) & (data[\'월별\'] <= max_month)]\n\n\n#     ## -------------------------------------------------------------------------------------------\n\n    ## -------------------- ▼ 2-0그룹 금일 출동 이력 출력 ▼ --------------------\n    \n    st.info(\'금일 출동내역\')\n    \n#     data[\'datetime\'] = pd.to_datetime(data[\'출동일시\'])\n    \n    today_date = now_date.strftime("%Y-%m-%d")\n    today_count = len(data[data[\'datetime\'] == today_date])\n    \n    if today_count > 0 :\n        st.dataframe(data[data[\'datetime\'] == today_date])\n    else:\n        st.markdown("금일 출동내역이 없습니다.")\n    \n#     ## -------------------------------------------------------------------\n\n\n\n#      ## -------------------- ▼ 2-2그룹 일간/주간/월간 평균 이송시간 통계 그래프 ▼ --------------------\n    \n\n    \n    st.success("이송시간 통계")\n\n    c1, c2, c3 = st.columns([0.3, 0.3, 0.3])\n    \n    with c1:\n\n        group_day_time = data.groupby(by = [\'출동일시\'], as_index = False)[\'이송 시간\'].mean()\n        st.line_chart(data = group_day_time, x = \'출동일시\', y = \'이송 시간\', use_container_width = True)\n\n    with c2:\n\n        group_week_time = data.groupby(by = [\'나이\'], as_index = False)[\'이송 시간\'].mean()\n        st.line_chart(data = group_week_time, x = \'나이\', y = \'이송 시간\', use_container_width = True)\n\n    with c3:\n\n        group_month_time = data.groupby(by = [\'중증질환\'], as_index = False)[\'이송 시간\'].mean()\n        st.line_chart(data = group_month_time, x = \'중증질환\', y = \'이송 시간\', use_container_width = True)\n\n    \n#     ## -------------------------------------------------------------------------------------------\n\n#     ## -------------------- ▼ 2-3 그룹 일간/주간/월간 총 출동 건수 통계 그래프 ▼ --------------------\n\n    \n    select_bins = st.radio("주기", (\'일간\', \'주간\', \'월간\'), horizontal=True)\n    \n    st.error("출동 건수")\n    \n    if select_bins == \'일간\':\n        select_df = day_list_df\n#         st.write(select_df)\n        re_select_df = select_df.rename(columns={"출동일시": \'일별\'})    \n        \n        dispatch_count = re_select_df.groupby(by = \'일별\', as_index = False)[\'ID\'].count()\n        dispatch_count = dispatch_count.rename(columns = {\'ID\' : \'출동건수\'})\n        dispatch_count = dispatch_count.sort_values(\'일별\', ascending = True)\n\n        st.bar_chart(dispatch_count, x = \'일별\', y = \'출동건수\', use_container_width = True)\n        \n    elif select_bins == \'주간\':\n        select_df = week_list_df\n#         st.write(select_df)\n        \n        dispatch_count = select_df.groupby(by = \'주별\', as_index = False)[\'ID\'].count()\n        dispatch_count = dispatch_count.rename(columns = {\'ID\' : \'출동건수\'})\n        dispatch_count = dispatch_count.sort_values(\'주별\', ascending = True)\n\n        st.bar_chart(dispatch_count, x = \'주별\', y = \'출동건수\', use_container_width = True)\n        \n    else:\n        select_df = month_list_df\n#         st.write(select_df)\n        \n        dispatch_count = select_df.groupby(by = \'월별\', as_index = False)[\'ID\'].count()\n        dispatch_count = dispatch_count.rename(columns = {\'ID\' : \'출동건수\'})\n        dispatch_count = dispatch_count.sort_values(\'월별\', ascending = True)\n\n        st.bar_chart(dispatch_count, x = \'월별\', y = \'출동건수\', use_container_width = True)\n   \n\n\n#     ## -------------------------------------------------------------------------------------------\n\n#     ## -------------------- ▼ 2-4 성별/중증질환/나이대 별 비율 그래프 ▼ --------------------\n    \n    import plotly.express as px\n    \n    st.warning("중증 질환별 통계")\n\n    c1, c2, c3 = st.columns([0.3, 0.3, 0.3])\n    \n    with c1: # 성별 통계\n\n        group_day_disease = select_df.groupby(by=[\'성별\'], as_index=False)[\'ID\'].count()\n        group_day_disease = group_day_disease.rename(columns={\'ID\' : \'출동건수\'})\n\n        fig = px.pie(group_day_disease, names=\'성별\', values=\'출동건수\', title = \'성별 통계\' , hole = 0.3)\n        fig.update_traces(textposition = \'inside\', textinfo = \'percent + label\')\n        fig.update_layout(font=dict(size=16))\n        st.plotly_chart(fig)\n\n    with c2: # 중증질환별 통계\n\n        group_day_disease = select_df.groupby(by=[\'중증질환\'], as_index=False)[\'ID\'].count()\n        group_day_disease = group_day_disease.rename(columns={\'ID\' : \'출동건수\'})\n\n        fig = px.pie(group_day_disease, names=\'중증질환\', values=\'출동건수\', title = \'중증질환 별 통계\' , hole = 0.3)\n        fig.update_traces(textposition = \'inside\', textinfo = \'percent + label\')\n        fig.update_layout(font=dict(size=16))\n        st.plotly_chart(fig)\n\n    with c3:  # 나이대별 통계\n\n        select_df[\'나이대\'] = (select_df[\'나이\']//10)*10\n        group_day_disease = select_df.groupby(by=[\'나이대\'], as_index=False)[\'ID\'].count()\n        group_day_disease = group_day_disease.rename(columns={\'ID\' : \'출동건수\'})\n\n        fig = px.pie(group_day_disease, names=\'나이대\', values=\'출동건수\', title = \'나이대 별 통계\' , hole = 0.3)\n        fig.update_traces(textposition = \'inside\', textinfo = \'percent + label\')\n        fig.update_layout(font=dict(size=16))\n        st.plotly_chart(fig)\n\n    \n    ## -------------------------------------------------------------------------------------------\n\n    ## -------------------- ▼ 2-4그룹 그외 필요하다고 생각되는 정보 추가 ▼ --------------------\n\n    \n# C:\\Users\\user\\KT수업자료\\미프 5차\\DX_미니프로젝트_5차_4일차_실습자료\\dashboard.py\n')


# In[ ]:


# 프로포타입 확인하기

get_ipython().system('streamlit run app.py')


# ----------

# # 수고하셨습니다.

# ----------

# 
